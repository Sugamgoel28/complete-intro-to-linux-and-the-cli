{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/lol",
    "result": {"data":{"markdownRemark":{"html":"<p>A brief aside here for how to select multiple files.</p>\n<h2 id=\"wilcards\" style=\"position:relative;\"><a href=\"#wilcards\" aria-label=\"wilcards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wilcards</h2>\n<p>Let's you wanted to remove all the .txt files in your directory. You could say <code class=\"language-text\">rm file1.txt file2.txt file3.txt &lt;etc></code> but that's time consuming. You know they all end with .txt, wouldn't it be nice if you could say \"remove anything that ends in .txt\"? You can! That's what the wildcard <code class=\"language-text\">*</code> is for with paths. Instead of the command above, you can do <code class=\"language-text\">rm *.txt</code> and it'll remove everything matches that pattern. If you want to try this, use the <code class=\"language-text\">-i</code> flag so it'll prompt if you want to delete the files or not so you don't accidentally things you don't mean to.</p>\n<p>Okay, so say you wanted to match file1.txt and file2.txt but not file.txt. <code class=\"language-text\">file*.txt</code> will match all three of those. For that you can use <code class=\"language-text\">?</code>. So try <code class=\"language-text\">file?.txt</code>.</p>\n<p>Try this</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> file1.txt file2.txt file.txt\n<span class=\"token function\">ls</span> file*.txt\n<span class=\"token function\">ls</span> file?.txt</code></pre></div>\n<p>Notice the first ls call does output <code class=\"language-text\">file.txt</code> and the second one doesn't.</p>\n<p>A curious fact above how this (and everyhing below with expansions) works is that it's bash that does the translation of <code class=\"language-text\">*</code> and <code class=\"language-text\">?</code> and <em>not</em> the programs. So when you say <code class=\"language-text\">ls file*.txt</code>, what <code class=\"language-text\">ls</code> actually ends up getting inputted is <code class=\"language-text\">ls file1.txt file2.txt file.txt</code>. That's important because <code class=\"language-text\">ls</code> doesn't have to support anything, which means this works anywhere in bash.</p>\n<p>So, more on <code class=\"language-text\">?</code> vs <code class=\"language-text\">*</code>. <code class=\"language-text\">?</code> represents <strong>exactly one character</strong>. So <code class=\"language-text\">file?.txt</code> won't match <code class=\"language-text\">file10.txt</code> either. So you could match <code class=\"language-text\">file1.txt</code> as well by doing <code class=\"language-text\">ls f?le1.txt</code> since that <code class=\"language-text\">?</code> represent any one character there.</p>\n<p>Finally you can use <code class=\"language-text\">[]</code> to limit your characters too. Let's say you wanted 1-5. So you could say <code class=\"language-text\">ls file[1-5].txt</code>. Or you can say anything that matches not these characters by saying <code class=\"language-text\">ls file[^1-5].txt</code></p>\n<h2 id=\"expansions\" style=\"position:relative;\"><a href=\"#expansions\" aria-label=\"expansions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expansions</h2>\n<p>Let's say you wanted to create three files using touch all at once. You could do:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> file4.txt\n<span class=\"token function\">touch</span> file5.txt\n<span class=\"token function\">touch</span> file6.txt</code></pre></div>\n<p>It's a bit annoying but it'll work. But try this instead</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> file<span class=\"token punctuation\">{</span><span class=\"token number\">4,5</span>,6<span class=\"token punctuation\">}</span>.txt\n<span class=\"token function\">touch</span> <span class=\"token punctuation\">{</span>Aisha,Lanie,Joumana,Krista<span class=\"token punctuation\">}</span>-profile.txt</code></pre></div>\n<p>Even better, try this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> file<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>.txt</code></pre></div>\n<p>Pretty cool right? Okay, let's get a couple more advance ones in there. We'll use echo from now one to not fill up our folder with garbage files but know this works anywhere in bash.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">..</span>z<span class=\"token punctuation\">}</span> <span class=\"token comment\"># prints a to z</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span>z<span class=\"token punctuation\">..</span>a<span class=\"token punctuation\">}</span> <span class=\"token comment\"># reverse order</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># prints every other (aka even) number from 0 to 100</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">..</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># prints every 5th number in reverse order from 100 to 0</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">..</span>z<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># prints out a1 a2 a3 a4 a5 b1 b2 b3 &lt;etc></span></code></pre></div>\n<p>Are these useful all the time? No, but when they are they can save you a bunch of time!</p>","frontmatter":{"path":"/lol","title":"Wildcards and Replacements","order":"5B","section":"Files, Pipes, and Permissions","description":"Using a few tricks you can cleverly select multiple files at a time with bash. Brian in this section will go over wilcards, expansions, and replacements"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"3A","path":"/anatomy-of-a-cli-command","title":"Anatomy of a CLI Command"}}},{"node":{"frontmatter":{"order":"8B","path":"/apt","title":"APT"}}},{"node":{"frontmatter":{"order":"10C","path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":"9C","path":"/conditionals","title":"Conditionals"}}},{"node":{"frontmatter":{"order":"10A","path":"/cron","title":"cron"}}},{"node":{"frontmatter":{"order":"7D","path":"/curl","title":"curl"}}},{"node":{"frontmatter":{"order":"10B","path":"/customize-your-shell","title":"Customize Your Shell"}}},{"node":{"frontmatter":{"order":"6A","path":"/environments","title":"Environments"}}},{"node":{"frontmatter":{"order":"10D","path":"/errata","title":"Errata"}}},{"node":{"frontmatter":{"order":"5A","path":"/interacting-with-files","title":"Interacting with Files"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"2C","path":"/lets-run-linux","title":"Let's Run Linux"}}},{"node":{"frontmatter":{"order":"9D","path":"/loops-and-arrays","title":"Loops and Arrays"}}},{"node":{"frontmatter":{"order":"4A","path":"/nano","title":"nano"}}},{"node":{"frontmatter":{"order":"6D","path":"/process-operators","title":"Exit Codes, Process Operators, and Subcommands"}}},{"node":{"frontmatter":{"order":"6B","path":"/processes","title":"Processes"}}},{"node":{"frontmatter":{"order":"7B","path":"/sftp","title":"SFTP"}}},{"node":{"frontmatter":{"order":"3C","path":"/signals-and-the-power-of-ctrl","title":"Signals and the Power of CTRL"}}},{"node":{"frontmatter":{"order":"8C","path":"/snaps","title":"Snaps"}}},{"node":{"frontmatter":{"order":"7A","path":"/ssh","title":"SSH"}}},{"node":{"frontmatter":{"order":"5C","path":"/streams-and-pipes","title":"Streams and Pipes"}}},{"node":{"frontmatter":{"order":"3B","path":"/common-tips-and-tricks","title":"Common Tips and Tricks"}}},{"node":{"frontmatter":{"order":"5D","path":"/users-groups-and-permissions","title":"Users, Groups, and Permissions"}}},{"node":{"frontmatter":{"order":"9B","path":"/variables","title":"Variables"}}},{"node":{"frontmatter":{"order":"4B","path":"/vim","title":"vim"}}},{"node":{"frontmatter":{"order":"7C","path":"/wget","title":"wget"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is-linux","title":"What is Linux"}}},{"node":{"frontmatter":{"order":"8A","path":"/what-is-package-management","title":"What is Package Management"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-will-you-learn","title":"What you will learn"}}},{"node":{"frontmatter":{"order":"5B","path":"/lol","title":"Wildcards and Replacements"}}},{"node":{"frontmatter":{"order":"9A","path":"/writing-your-own-scripts","title":"Writing Your Own Scripts"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}