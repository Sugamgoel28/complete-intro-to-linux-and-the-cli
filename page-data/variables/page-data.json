{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/variables",
    "result": {"data":{"markdownRemark":{"html":"<p>As you write more complicated scripts you need to use variables to make it more flexible. The way to do this is to use variables. Can you imagine writing code without use variables? It's possible, I suppose, but certainly not fun. And let's not do it!</p>\n<h2 id=\"setting-a-variable\" style=\"position:relative;\"><a href=\"#setting-a-variable\" aria-label=\"setting a variable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting a Variable</h2>\n<p>This is a short section! It's very easy to set a variable. and you've already done it. Modify ~/bin/gen_files to be as follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span>\n\n<span class=\"token assign-left variable\">DESTINATION</span><span class=\"token operator\">=~</span>/temp\n<span class=\"token assign-left variable\">FILE_PREFIX</span><span class=\"token operator\">=</span>file\n\n<span class=\"token function\">mkdir</span> -p <span class=\"token variable\">$DESTINATION</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$DESTINATION</span>\n<span class=\"token function\">touch</span> <span class=\"token variable\">${FILE_PREFIX}</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>.txt\n<span class=\"token builtin class-name\">echo</span> <span class=\"token keyword\">done</span></code></pre></div>\n<p>As you can see above, setting a variable is as easy as saying <code class=\"language-text\">NAME=value</code>. You can use quotes too, optionally. You do not have to make them uppercase though I suggest you do as that's what's normal for bash scripts.</p>\n<p>Below we're using them like we used environmental variables before (hint: those are really just variables too.)</p>\n<p>Let's talk about <code class=\"language-text\">touch ${FILE_PREFIX}{1..10}.txt</code>. Whereas we don't need the <code class=\"language-text\">{}</code> the first two times we refer to a variable, we do on this one. That's because we're inserting it in the middle of something. The <code class=\"language-text\">{}</code> let bash know where the variable names stops. The first two you can totally use them too e.g. <code class=\"language-text\">cd ${DESTINATION}</code> but it's optional. As a reminder, if you use <code class=\"language-text\">$()</code> it means a subcommand like <code class=\"language-text\">touch $(whoami).txt</code>.</p>\n<h2 id=\"user-input\" style=\"position:relative;\"><a href=\"#user-input\" aria-label=\"user input permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User Input</h2>\n<p>So what if we want users to be able to define the file prefix? Easy! There's a program called <code class=\"language-text\">read</code> that will get user input and define a variable based on it. Try it by running <code class=\"language-text\">read name &amp;&amp; echo hello $name</code></p>\n<p>So let's stick that in there</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span>\n\n<span class=\"token assign-left variable\">DESTINATION</span><span class=\"token operator\">=~</span>/temp\n<span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"enter a file prefix: \"</span> FILE_PREFIX\n\n<span class=\"token function\">mkdir</span> -p <span class=\"token variable\">$DESTINATION</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$DESTINATION</span>\n<span class=\"token function\">touch</span> <span class=\"token variable\">${FILE_PREFIX}</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>.txt\n<span class=\"token builtin class-name\">echo</span> <span class=\"token keyword\">done</span></code></pre></div>\n<p>The <code class=\"language-text\">-p</code> flag allows us to <strong>p</strong>rompt the user with a string, letting them know what we're expecting</p>\n<h2 id=\"arguments\" style=\"position:relative;\"><a href=\"#arguments\" aria-label=\"arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arguments</h2>\n<p>What if we want the user to be able to pass in the path to where we want to create the directory? We can do that via arguments (sometimes called parameters too.) We want the user to be able say <code class=\"language-text\">gen_files ~/different_directory</code> and use that input as $DESTINATION. Easy!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span>\n\n<span class=\"token assign-left variable\">DESTINATION</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n<span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"enter a file prefix: \"</span> FILE_PREFIX\n\n<span class=\"token function\">mkdir</span> -p <span class=\"token variable\">$DESTINATION</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$DESTINATION</span>\n<span class=\"token function\">touch</span> <span class=\"token variable\">${FILE_PREFIX}</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>.txt\n<span class=\"token builtin class-name\">echo</span> <span class=\"token keyword\">done</span></code></pre></div>\n<p>Here we just replaced what went into <code class=\"language-text\">DESTINATION</code> with <code class=\"language-text\">$1</code>. We totally could have replaced everywhere there was DESTINATION with $1, but it was easier (and made the script clearer) by replacing the contents of DESTINATION with $1.</p>\n<p><code class=\"language-text\">$0</code> is available here too. It'll be <code class=\"language-text\">gen_files</code>. And if you gave two arguments, the second one will be <code class=\"language-text\">$2</code> and so on and so forth.</p>","frontmatter":{"path":"/variables","title":"Variables","order":"9B","section":"Shell Scripts","description":"As a developer writes more complicated scripts they need to use variables to make it more flexible. Brian goes over how to set and use variables"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"3A","path":"/anatomy-of-a-cli-command","title":"Anatomy of a CLI Command"}}},{"node":{"frontmatter":{"order":"8B","path":"/apt","title":"APT"}}},{"node":{"frontmatter":{"order":"10C","path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":"9C","path":"/conditionals","title":"Conditionals"}}},{"node":{"frontmatter":{"order":"10A","path":"/cron","title":"cron"}}},{"node":{"frontmatter":{"order":"7D","path":"/curl","title":"curl"}}},{"node":{"frontmatter":{"order":"10B","path":"/customize-your-shell","title":"Customize Your Shell"}}},{"node":{"frontmatter":{"order":"6A","path":"/environments","title":"Environments"}}},{"node":{"frontmatter":{"order":"10D","path":"/errata","title":"Errata"}}},{"node":{"frontmatter":{"order":"5A","path":"/interacting-with-files","title":"Interacting with Files"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"2C","path":"/lets-run-linux","title":"Let's Run Linux"}}},{"node":{"frontmatter":{"order":"9D","path":"/loops-and-arrays","title":"Loops and Arrays"}}},{"node":{"frontmatter":{"order":"4A","path":"/nano","title":"nano"}}},{"node":{"frontmatter":{"order":"6D","path":"/process-operators","title":"Exit Codes, Process Operators, and Subcommands"}}},{"node":{"frontmatter":{"order":"6B","path":"/processes","title":"Processes"}}},{"node":{"frontmatter":{"order":"7B","path":"/sftp","title":"SFTP"}}},{"node":{"frontmatter":{"order":"3C","path":"/signals-and-the-power-of-ctrl","title":"Signals and the Power of CTRL"}}},{"node":{"frontmatter":{"order":"8C","path":"/snaps","title":"Snaps"}}},{"node":{"frontmatter":{"order":"7A","path":"/ssh","title":"SSH"}}},{"node":{"frontmatter":{"order":"5C","path":"/streams-and-pipes","title":"Streams and Pipes"}}},{"node":{"frontmatter":{"order":"3B","path":"/common-tips-and-tricks","title":"Common Tips and Tricks"}}},{"node":{"frontmatter":{"order":"5D","path":"/users-groups-and-permissions","title":"Users, Groups, and Permissions"}}},{"node":{"frontmatter":{"order":"9B","path":"/variables","title":"Variables"}}},{"node":{"frontmatter":{"order":"4B","path":"/vim","title":"vim"}}},{"node":{"frontmatter":{"order":"7C","path":"/wget","title":"wget"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is-linux","title":"What is Linux"}}},{"node":{"frontmatter":{"order":"8A","path":"/what-is-package-management","title":"What is Package Management"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-will-you-learn","title":"What you will learn"}}},{"node":{"frontmatter":{"order":"5B","path":"/lol","title":"Wildcards and Replacements"}}},{"node":{"frontmatter":{"order":"9A","path":"/writing-your-own-scripts","title":"Writing Your Own Scripts"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}