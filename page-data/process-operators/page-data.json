{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/process-operators",
    "result": {"data":{"markdownRemark":{"html":"<p>Before we jump too far into how to run commands in sequences, let's chat one second about exit codes. Whenever a process exits, it exits with an exit code. This exit code corresponds to if a process successfully completed whatever you told it to do. Sometimes this is a bit misleading because sometime programs are meant to be stopped before they complete (as some like <code class=\"language-text\">yes</code> will never actually complete by themselves).</p>\n<p>A program that successfully runs and exits by itself will have an exit code of 0. Try this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">date</span> <span class=\"token comment\"># show current date, runs successfully</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\"># $? corresponds to the last exit code, in this case 0</span>\n<span class=\"token function\">yes</span> <span class=\"token comment\"># hit CTRL+C to stop it</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\"># you stopped it so it exited with a non-zero code, 130</span></code></pre></div>\n<p>So what do all the codes mean? Well, it depends on the program and it's not super consistent. It can be any number from 0 to 256. But here are a few good ones that are common</p>\n<ul>\n<li>0: means it was successful. Anything other than 0 means it failed</li>\n<li>1: a good general catch-all \"there was an error\"</li>\n<li>2: a bash internal error, meaning you or the program tried to use bash in an incorrect way</li>\n<li>126: Either you don't have permission or the file isn't executable</li>\n<li>127: Command not found</li>\n<li>128: The exit command itself had a problem, usually that you provided a non-integer exit code to it</li>\n<li>130: You ended the program with CTRL+C</li>\n<li>137: You ended the program with SIGKILL</li>\n<li>255: Out-of-bounds, you tried to exit with a code larger than 255</li>\n</ul>\n<p>There are a few others but these are the most common ones you'll see. You'll see some programs use numbers like 5 to 100 to signify different ways the program ended but you can pretty safely ignore that. It's usually just important if it's 0 or not-0.</p>\n<p>Okay, so why is this important? It can be useful to see if a previous command succeeded or not, but it's also useful for running programs in a sequence using operations.</p>\n<p>So what if you need to run two processes in a row, one right after the other? Well, you have a few options.</p>\n<h2 id=\"run-if-first-one-succeeds\" style=\"position:relative;\"><a href=\"#run-if-first-one-succeeds\" aria-label=\"run if first one succeeds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run if first one succeeds</h2>\n<p>You'll probably see this the most. Let's say I wanted to create a file, add the date to it, and then add my current uptime to it. (try runnning <code class=\"language-text\">uptime</code>, it just tells you how long your computer has been running.)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> status.txt <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">date</span> <span class=\"token operator\">>></span> status.txt <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">uptime</span> <span class=\"token operator\">>></span> status.txt\n<span class=\"token function\">cat</span> status.txt</code></pre></div>\n<p>You can see it does all three commands right in a row. That's what the <code class=\"language-text\">&amp;&amp;</code> operator does. It runs from left to right (touch, date, then uptime). The <code class=\"language-text\">&amp;&amp;</code> operator will bail if any of those commands fails. Try this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">date</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cat</span> not-real-file.txt <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> hi <span class=\"token comment\"># the date will display but hi won't</span></code></pre></div>\n<p>Since <code class=\"language-text\">not-real-file.txt</code> doesn't exit, it bails and hi is never echoed.</p>\n<h2 id=\"run-if-first-one-fails\" style=\"position:relative;\"><a href=\"#run-if-first-one-fails\" aria-label=\"run if first one fails permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run if first one fails</h2>\n<p>There's also a <code class=\"language-text\">||</code> command that will run if the first one fails.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> hi <span class=\"token comment\"># you'll see hi</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> hi <span class=\"token comment\"># you won't see hi</span></code></pre></div>\n<p><code class=\"language-text\">false</code> is a command that just returns <code class=\"language-text\">1</code> (there is a <code class=\"language-text\">true</code> that always returns 0) In this case, you'll see hi the first time and not the second time.</p>\n<h2 id=\"always-run\" style=\"position:relative;\"><a href=\"#always-run\" aria-label=\"always run permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Always Run</h2>\n<p>If you need <em>always</em> run the second command, use a <code class=\"language-text\">;</code> instead of either &#x26;&#x26; or ||.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token boolean\">false</span> <span class=\"token punctuation\">;</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> hey <span class=\"token comment\"># you'll see hey</span></code></pre></div>\n<h2 id=\"subcommands\" style=\"position:relative;\"><a href=\"#subcommands\" aria-label=\"subcommands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subcommands</h2>\n<p>Sometimes you need to invoke a command within a command. Luckily bash has you covered here with the ability to run subcommands.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> I think <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">whoami</span><span class=\"token variable\">)</span></span> is a very cool user <span class=\"token comment\"># I think ubuntu is very cool</span></code></pre></div>\n<p>The <code class=\"language-text\">$()</code> allows you to put bash commands inside of it that then you can use that output as part of an input to another command. In this case, we're using <code class=\"language-text\">whoami</code> to get your username to echo that affirming message out. Let's a more practical one. Let's say you wanted to make a job that you could run every day to output what your current uptime was. You could run this command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%x<span class=\"token variable\">)</span></span> – <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uptime</span><span class=\"token variable\">)</span></span> <span class=\"token operator\">>></span> log.txt</code></pre></div>\n<p>The <code class=\"language-text\">+%x</code> part is just saying what date of format you want, and I got that from reading <code class=\"language-text\">date --help</code>. So end printing something like</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">06/17/20 – 21:38:34 up 8:51, 1 user, load average: 0.00, 0.00, 0.00</code></pre></div>\n<p>There are far more useful logs to write but you can see here the power of subcommands. Note you can also use backticks like ` instead of $() but it's preferred to use the $() notation. Notably, you nest infinitely with $(). For more reasons, <a href=\"http://mywiki.wooledge.org/BashFAQ/082\">read here</a>.</p>","frontmatter":{"path":"/process-operators","title":"Exit Codes, Process Operators, and Subcommands","order":"6D","section":"Environments and Processes","description":"Need to run one command after another? Use process operators! Brian explains how to run sequence of commands and subcommands as well as exit codes"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"9C","path":"/conditionals","title":"Conditionals"}}},{"node":{"frontmatter":{"order":"10C","path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":"7D","path":"/curl","title":"curl"}}},{"node":{"frontmatter":{"order":"3A","path":"/anatomy-of-a-cli-command","title":"Anatomy of a CLI Command"}}},{"node":{"frontmatter":{"order":"6A","path":"/environments","title":"Environments"}}},{"node":{"frontmatter":{"order":"10A","path":"/cron","title":"cron"}}},{"node":{"frontmatter":{"order":"10D","path":"/errata","title":"Errata"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"9D","path":"/loops-and-arrays","title":"Loops and Arrays"}}},{"node":{"frontmatter":{"order":"8B","path":"/apt","title":"APT"}}},{"node":{"frontmatter":{"order":"4A","path":"/nano","title":"nano"}}},{"node":{"frontmatter":{"order":"6D","path":"/process-operators","title":"Exit Codes, Process Operators, and Subcommands"}}},{"node":{"frontmatter":{"order":"6B","path":"/processes","title":"Processes"}}},{"node":{"frontmatter":{"order":"2C","path":"/lets-run-linux","title":"Let's Run Linux"}}},{"node":{"frontmatter":{"order":"7B","path":"/sftp","title":"SFTP"}}},{"node":{"frontmatter":{"order":"8C","path":"/snaps","title":"Snaps"}}},{"node":{"frontmatter":{"order":"5A","path":"/interacting-with-files","title":"Interacting with Files"}}},{"node":{"frontmatter":{"order":"10B","path":"/customize-your-shell","title":"Customize Your Shell"}}},{"node":{"frontmatter":{"order":"5C","path":"/streams-and-pipes","title":"Streams and Pipes"}}},{"node":{"frontmatter":{"order":"9B","path":"/variables","title":"Variables"}}},{"node":{"frontmatter":{"order":"3B","path":"/common-tips-and-tricks","title":"Common Tips and Tricks"}}},{"node":{"frontmatter":{"order":"3C","path":"/signals-and-the-power-of-ctrl","title":"Signals and the Power of CTRL"}}},{"node":{"frontmatter":{"order":"4B","path":"/vim","title":"vim"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is-linux","title":"What is Linux"}}},{"node":{"frontmatter":{"order":"5D","path":"/users-groups-and-permissions","title":"Users, Groups, and Permissions"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-will-you-learn","title":"What you will learn"}}},{"node":{"frontmatter":{"order":"7C","path":"/wget","title":"wget"}}},{"node":{"frontmatter":{"order":"5B","path":"/lol","title":"Wildcards and Replacements"}}},{"node":{"frontmatter":{"order":"8A","path":"/what-is-package-management","title":"What is Package Management"}}},{"node":{"frontmatter":{"order":"9A","path":"/writing-your-own-scripts","title":"Writing Your Own Scripts"}}},{"node":{"frontmatter":{"order":"7A","path":"/ssh","title":"SSH"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}