{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/writing-your-own-scripts",
    "result": {"data":{"markdownRemark":{"html":"<p>Often times you want do more than just one command at a time; you want to run many of them. Bash allows you to put many commands into one file to create a program of programs which is called a shell script.</p>\n<p>How that work? Well, secretly, you have been learning a programming language this entire time. Bash is actually a programming language and you have been learning it this whole time. We have been just been running it one line at a time via a REPL. You can actually do this with Python or Node.js too. Try just running <code class=\"language-text\">python3</code> or <code class=\"language-text\">node</code>. It will drop you in a similar style REPL (FYI, to quit either node or python3, use CTRL+D.)</p>\n<h2 id=\"my-first-bashscript\" style=\"position:relative;\"><a href=\"#my-first-bashscript\" aria-label=\"my first bashscript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My First Bashscript</h2>\n<p>Let's make our first bash script. Let's make make a directory called temp, generate ten files, and exit. Basically we want to make a bashscript that does this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p ~/temp <span class=\"token comment\"># -p mean don't error if it exists in this case, it does other things too</span>\n<span class=\"token builtin class-name\">cd</span> ~/temp\n<span class=\"token function\">touch</span> file<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>.txt\n<span class=\"token builtin class-name\">echo</span> <span class=\"token keyword\">done</span></code></pre></div>\n<p>So let's do that. You can use either vi or nano, both work. So run <code class=\"language-text\">vi gen_files.sh</code> or <code class=\"language-text\">nano gen_files.sh</code>. From there, put the above code in it and save.</p>\n<p>Also, you can cd freely within a script: it only changes the working directory for that shell script, not for the user. The user in their interactive shell won't</p>\n<p>Now, to run it, do <code class=\"language-text\">. gen_files.sh</code> or <code class=\"language-text\">source gen_files.sh</code> or <code class=\"language-text\">bash gen_files.sh</code>. Any of those work the same way.</p>\n<h2 id=\"hashbang\" style=\"position:relative;\"><a href=\"#hashbang\" aria-label=\"hashbang permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hashbang</h2>\n<p>Notice we didn't have to make gen_files.sh an executable file. That's because we're not actually executing it directly: we're executing bash or source (source and . are the same thing) and those are executing our program. But what if wanted to actually make it a new command that we didn't have to feed into source or bash? What if we could basically make it indistiguishable from a normal command like cp or curl? You can! Let's see how.</p>\n<p>Open <code class=\"language-text\">gen_files.sh</code> and put this <strong>as the very first line</strong>. I bold that because it must be the first line.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span></code></pre></div>\n<p>This line (called a shebang, hashbang, or many other things; often ! is called a bang in computing) lets bash know how to execute this file. It must be on the first line and it must start with <code class=\"language-text\">#!</code>. It's then always followed by the absolute path (meaning it starts with <code class=\"language-text\">/</code> and gives you the full path; you cannot give it a relative e.g. <code class=\"language-text\">./bash</code>). This works with Python, for example. If you want a script to executed by python3, you can find the path of any program by saying <code class=\"language-text\">which &lt;command></code>. So if we want to know where python3 is, we can say <code class=\"language-text\">which python3</code> and get the path from that.</p>\n<p>Okay, so now we have a hashbang in place. However the file now needs the executable permission. Let's do that. Run <code class=\"language-text\">chmod 700 gen_files.sh</code>. Now you can run <code class=\"language-text\">./gen_files.sh</code> without anything running as the executable. We need the <code class=\"language-text\">./</code> because gen_files.sh isn't on our PATH yet (I'll explain that very shortly.)</p>\n<h2 id=\"path\" style=\"position:relative;\"><a href=\"#path\" aria-label=\"path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PATH</h2>\n<p>Okay, so right now you have to give a path to be able to run gen_files.sh. What if we want to be able to run <code class=\"language-text\">gen_files</code> from anywhere on our computer? We can do that!</p>\n<p>Your user a variable set called <code class=\"language-text\">PATH</code>. Your PATH is a series of locations of where programs live. If I say <code class=\"language-text\">python3</code>, it goes through each of those locations and checks for anything called <code class=\"language-text\">python3</code>. If there are two, it uses the first one it finds (the path furthest left in the path.)</p>\n<p>You can see your PATH if you run <code class=\"language-text\">echo $PATH</code>. You should see something like <code class=\"language-text\">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</code> (it may not be exactly this.)</p>\n<p>In general I don't mess any of those directories. All of those are system wide bin directories (if you had more than one user they'd share them.)\nSo a good idea is to have your own <code class=\"language-text\">~/bin</code> directory. So let's do that.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~\n<span class=\"token function\">mkdir</span> bin\n<span class=\"token function\">mv</span> gen_files.sh bin/gen_files\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=~</span>/bin:<span class=\"token environment constant\">$PATH</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span>\ngen_files</code></pre></div>\n<p>Hooray! Now it works! We added ~/bin to our path so now bash will try to execute anything we put in there. We added ~/bin to the front of our path and that's a good idea. If, for example, wanted a different rm program than the default one, we don't want to mess with the system one, just ours. We would want ours to \"shadow\" the system one and to not mess with everyone else's rm.</p>\n<p>When we set the PATH, we used PATH to define itself. Keep in mind that bash will replace that $PATH <em>before</em> it runs our command so by the time we try to set the variable it's just a string. That's why that works.</p>\n<p>Lastly, we only set the PATH for just this session. Once we close our terminal, it'll go away. However we can add this line to our .bashrc and it'll always get set! Run <code class=\"language-text\">vi ~/.bashrc</code> (or nano) and add this line somewhere:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=~</span>/bin:<span class=\"token environment constant\">$PATH</span></code></pre></div>\n<p>Multipass already had a lot of stuff in there for me so don't get overwhelmed. You can put that line just about anywhere. Whenever you make a change to .bashrc you have to rerun it or it won't take effect on your current session. Run <code class=\"language-text\">. ~/.bashrc</code> and you'll be set.</p>\n<h2 id=\"comments\" style=\"position:relative;\"><a href=\"#comments\" aria-label=\"comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comments</h2>\n<p>If you want to add comments, you just add <code class=\"language-text\">#</code> and then from there you can put anything after it. You've probably notice me doing it before this.</p>","frontmatter":{"path":"/writing-your-own-scripts","title":"Writing Your Own Scripts","order":"9A","section":"Shell Scripts","description":"Often times you want do more than just one command at a time; you want to run many of them. Bash allows you to put many commands into one file to create a program of programs which is called a shell script."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"3A","path":"/anatomy-of-a-cli-command","title":"Anatomy of a CLI Command"}}},{"node":{"frontmatter":{"order":"8B","path":"/apt","title":"APT"}}},{"node":{"frontmatter":{"order":"10C","path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":"10A","path":"/cron","title":"cron"}}},{"node":{"frontmatter":{"order":"9C","path":"/conditionals","title":"Conditionals"}}},{"node":{"frontmatter":{"order":"10B","path":"/customize-your-shell","title":"Customize Your Shell"}}},{"node":{"frontmatter":{"order":"5A","path":"/interacting-with-files","title":"Interacting with Files"}}},{"node":{"frontmatter":{"order":"6A","path":"/environments","title":"Environments"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"2C","path":"/lets-run-linux","title":"Let's Run Linux"}}},{"node":{"frontmatter":{"order":"9D","path":"/loops-and-arrays","title":"Loops and Arrays"}}},{"node":{"frontmatter":{"order":"10D","path":"/errata","title":"Errata"}}},{"node":{"frontmatter":{"order":"6D","path":"/process-operators","title":"Exit Codes, Process Operators, and Subcommands"}}},{"node":{"frontmatter":{"order":"4A","path":"/nano","title":"nano"}}},{"node":{"frontmatter":{"order":"7D","path":"/curl","title":"curl"}}},{"node":{"frontmatter":{"order":"8C","path":"/snaps","title":"Snaps"}}},{"node":{"frontmatter":{"order":"6B","path":"/processes","title":"Processes"}}},{"node":{"frontmatter":{"order":"7B","path":"/sftp","title":"SFTP"}}},{"node":{"frontmatter":{"order":"3C","path":"/signals-and-the-power-of-ctrl","title":"Signals and the Power of CTRL"}}},{"node":{"frontmatter":{"order":"7A","path":"/ssh","title":"SSH"}}},{"node":{"frontmatter":{"order":"3B","path":"/common-tips-and-tricks","title":"Common Tips and Tricks"}}},{"node":{"frontmatter":{"order":"9B","path":"/variables","title":"Variables"}}},{"node":{"frontmatter":{"order":"5D","path":"/users-groups-and-permissions","title":"Users, Groups, and Permissions"}}},{"node":{"frontmatter":{"order":"4B","path":"/vim","title":"vim"}}},{"node":{"frontmatter":{"order":"5C","path":"/streams-and-pipes","title":"Streams and Pipes"}}},{"node":{"frontmatter":{"order":"7C","path":"/wget","title":"wget"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is-linux","title":"What is Linux"}}},{"node":{"frontmatter":{"order":"8A","path":"/what-is-package-management","title":"What is Package Management"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-will-you-learn","title":"What you will learn"}}},{"node":{"frontmatter":{"order":"5B","path":"/lol","title":"Wildcards and Replacements"}}},{"node":{"frontmatter":{"order":"9A","path":"/writing-your-own-scripts","title":"Writing Your Own Scripts"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}