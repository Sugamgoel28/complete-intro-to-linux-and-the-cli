{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/loops-and-arrays",
    "result": {"data":{"markdownRemark":{"html":"<p>Any programming language needs a way to do repetitive tasks and bash is no different. It has several flavors of loops that should look familiar to anyone who has done programming before.</p>\n<p>You frequently also need groups of variables. Bash has this is as well with arrays and we'll go over how to use those.</p>\n<h2 id=\"arrays-and-for-loops\" style=\"position:relative;\"><a href=\"#arrays-and-for-loops\" aria-label=\"arrays and for loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arrays and For Loops</h2>\n<p>Arrays can do a lot and are very flexible. For now we're just going to go over how to declare them and how to read from them. Make a new array.sh and put this in there:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">friends</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Kyle Marc Jem <span class=\"token string\">\"Brian Holt\"</span> Sarah<span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin class-name\">echo</span> My second friend is <span class=\"token variable\">${friends<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">friend</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">${friends<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>}</span>\n<span class=\"token keyword\">do</span>\n    <span class=\"token builtin class-name\">echo</span> friend: <span class=\"token variable\">$friend</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I have <span class=\"token variable\">${<span class=\"token operator\">#</span>friends<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>}</span> friends\"</span></code></pre></div>\n<p>The <code class=\"language-text\">friends=(Kyle Marc Jem \"Brian Holt\" Sarah)</code> line is how to define an array. If it's just one word (e.g. Kyle or Marc in this case) then you don't need quotes. You'll see for \"Brian Holt\" I added quotes so it can capture the space too.</p>\n<p>You see <code class=\"language-text\">${friends[1]}</code> is how you access items in an array. You do need the <code class=\"language-text\">{}</code> in this case or else it'll consfuse bash with path expansion stuff.</p>\n<p>Then we do a loop. We need to do the <code class=\"language-text\">${friends[*]}</code> to access everything in the array. If you said <code class=\"language-text\">echo ${friends[*]}</code> it would print the whole array.</p>\n<p>Then we can loop with <code class=\"language-text\">do</code> to start and <code class=\"language-text\">done</code> to end it.</p>\n<p>Lastly if you want to see the length, you use <code class=\"language-text\">${#friends[*]}</code>. Sort of wild stuff but it works!</p>\n<h2 id=\"while\" style=\"position:relative;\"><a href=\"#while\" aria-label=\"while permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>While</h2>\n<p>What if we wanted to make a program that wouldn't exit until you guessed the correct number? We can use a while loop together with read to make such a wonderfully annoying game.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># let \"NUM_TO_GUESS = ${RANDOM} % 10 + 1\"</span>\n<span class=\"token assign-left variable\">NUM_TO_GUESS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span> $RANDOM <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token variable\">))</span></span>\n<span class=\"token assign-left variable\">GUESSED_NUM</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"guess a number between 1 and 10\"</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$NUM_TO_GUESS</span> -ne <span class=\"token variable\">$GUESSED_NUM</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"your guess: \"</span> GUESSED_NUM\n<span class=\"token keyword\">done</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"you got it!\"</span></code></pre></div>\n<p>Let's talk a brief moment about <code class=\"language-text\">let</code>. <code class=\"language-text\">let</code> allows you to do math. You feed it a string of math of some variety and it will evaluate it for you. The shortcut to doing that (similar to how <code class=\"language-text\">test</code> works with []) is the dollar sign with double parentheses. The two lines I have there are equivalent.</p>\n<p><code class=\"language-text\">$RANDOM</code> is just a random number which we're using [modulo][mod] to get a random number between 1 and 10.</p>\n<p>Then the interesting part there is our while loop looks a lot like an if statement. And that's it!</p>\n<p>There are more types of loops and more interesting things you can do with them but we'll leave that to you. I generally have to look them every time I use them anyway, same with the array stuff.</p>","frontmatter":{"path":"/loops-and-arrays","title":"Loops and Arrays","order":"9D","section":"Shell Scripts","description":"To make any sort of complicated program you need loops and arrays. In this section Brian teaches the syntax for making arrays and looping over them."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"3A","path":"/anatomy-of-a-cli-command","title":"Anatomy of a CLI Command"}}},{"node":{"frontmatter":{"order":"8B","path":"/apt","title":"APT"}}},{"node":{"frontmatter":{"order":"10C","path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":"10A","path":"/cron","title":"cron"}}},{"node":{"frontmatter":{"order":"9C","path":"/conditionals","title":"Conditionals"}}},{"node":{"frontmatter":{"order":"10B","path":"/customize-your-shell","title":"Customize Your Shell"}}},{"node":{"frontmatter":{"order":"5A","path":"/interacting-with-files","title":"Interacting with Files"}}},{"node":{"frontmatter":{"order":"6A","path":"/environments","title":"Environments"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"2C","path":"/lets-run-linux","title":"Let's Run Linux"}}},{"node":{"frontmatter":{"order":"9D","path":"/loops-and-arrays","title":"Loops and Arrays"}}},{"node":{"frontmatter":{"order":"10D","path":"/errata","title":"Errata"}}},{"node":{"frontmatter":{"order":"6D","path":"/process-operators","title":"Exit Codes, Process Operators, and Subcommands"}}},{"node":{"frontmatter":{"order":"4A","path":"/nano","title":"nano"}}},{"node":{"frontmatter":{"order":"7D","path":"/curl","title":"curl"}}},{"node":{"frontmatter":{"order":"8C","path":"/snaps","title":"Snaps"}}},{"node":{"frontmatter":{"order":"6B","path":"/processes","title":"Processes"}}},{"node":{"frontmatter":{"order":"7B","path":"/sftp","title":"SFTP"}}},{"node":{"frontmatter":{"order":"3C","path":"/signals-and-the-power-of-ctrl","title":"Signals and the Power of CTRL"}}},{"node":{"frontmatter":{"order":"7A","path":"/ssh","title":"SSH"}}},{"node":{"frontmatter":{"order":"3B","path":"/common-tips-and-tricks","title":"Common Tips and Tricks"}}},{"node":{"frontmatter":{"order":"9B","path":"/variables","title":"Variables"}}},{"node":{"frontmatter":{"order":"5D","path":"/users-groups-and-permissions","title":"Users, Groups, and Permissions"}}},{"node":{"frontmatter":{"order":"4B","path":"/vim","title":"vim"}}},{"node":{"frontmatter":{"order":"5C","path":"/streams-and-pipes","title":"Streams and Pipes"}}},{"node":{"frontmatter":{"order":"7C","path":"/wget","title":"wget"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is-linux","title":"What is Linux"}}},{"node":{"frontmatter":{"order":"8A","path":"/what-is-package-management","title":"What is Package Management"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-will-you-learn","title":"What you will learn"}}},{"node":{"frontmatter":{"order":"5B","path":"/lol","title":"Wildcards and Replacements"}}},{"node":{"frontmatter":{"order":"9A","path":"/writing-your-own-scripts","title":"Writing Your Own Scripts"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}