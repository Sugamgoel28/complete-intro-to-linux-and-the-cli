{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/cron",
    "result": {"data":{"markdownRemark":{"html":"<p>Ever had a task that needs to be done every day? Linux has a feature called cron that will run tasks on a schedule.</p>\n<p>There are two ways to accomplish this, an easy way to remember and a slightly less easy way.</p>\n<h2 id=\"cron-folders\" style=\"position:relative;\"><a href=\"#cron-folders\" aria-label=\"cron folders permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cron folders</h2>\n<p>Any script you put in any of the following will be run on a schedule:</p>\n<ul>\n<li>/etc/cron.daily</li>\n<li>/etc/cron.hourly</li>\n<li>/etc/cron.monthly</li>\n<li>/etc/cron.weekly</li>\n</ul>\n<p>Just make sure they have executable privileges. <code class=\"language-text\">sudo chmod +x &lt;file></code> will do what you need it to do. Anything in here will be run as root.</p>\n<h2 id=\"crontab\" style=\"position:relative;\"><a href=\"#crontab\" aria-label=\"crontab permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>crontab</h2>\n<p>If you need a more defined schedule (like every five minutes, every other Thursday, every six months, etc.) then you can use the classic way, crontab. With crontab you can define a cron schedule to execute your scripts. Let's say we want to make a new file in <code class=\"language-text\">~/cronfiles</code> every two minutes.</p>\n<p>First, let's make the script. In your home directory, create <code class=\"language-text\">make-new-file</code> and put this in there.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p ~/temp-files\n<span class=\"token builtin class-name\">cd</span> ~/temp-files\n<span class=\"token function\">touch</span> file-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%s<span class=\"token variable\">)</span></span>.txt</code></pre></div>\n<p><code class=\"language-text\">date +%s</code> gives you the epoch timestamp, or how many seconds have elapsed since Jan 1, 1970.</p>\n<p>Now, if you do <code class=\"language-text\">crontab -e</code> it will run this as well as root. In this case, we'd like it to run as ubuntu. You can do that by doing <code class=\"language-text\">crontab -u ubuntu -e</code>. The first time it will ask you what editor you prefer to use to edit your crontab. I used vim.</p>\n<p>So the comments in the file it explains fairly well what to do but let's go over it. One job will look like this</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">* * * * * <span class=\"token operator\">&lt;</span>the <span class=\"token builtin class-name\">command</span> you want to run<span class=\"token operator\">></span></code></pre></div>\n<p>The above five stars would run every minute. Each of those stars represents a frequency. They represent as follows:</p>\n<p><code class=\"language-text\">&lt;minutes> &lt;hours> &lt;day of the month> &lt;month> &lt;day of the week></code></p>\n<p>The stars mean \"every\", hence why five stars runs every minute, So if we wanted to command once an hour on the fifth minute, we could do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">5</span> * * * * <span class=\"token operator\">&lt;</span>the <span class=\"token builtin class-name\">command</span> you want to run<span class=\"token operator\">></span></code></pre></div>\n<p>If we wanted it to run every half hour on Sundays, we could do:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">*/30 * * * <span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span>the <span class=\"token builtin class-name\">command</span> you want to run<span class=\"token operator\">></span>\n<span class=\"token number\">0,30</span> * * * <span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">></span>\n<span class=\"token comment\"># both equivalent</span></code></pre></div>\n<p>And so on and so forth. You can also use one of the special strings in here too:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">@daily <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">></span>\n@reboot <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">></span> <span class=\"token comment\"># everytime it starts up</span>\n@weekly <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">></span>\n@yearly <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">></span>\n@monthly <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">></span>\n@annually <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">></span></code></pre></div>\n<p>So yeah, like regex, I have to look this up every time. I rely a lot <a href=\"https://crontab.guru/\">crontab.guru</a>. It helps me make sure I got it right.</p>\n<p>So let's do it for our program. Run <code class=\"language-text\">crontab -u ubuntu -e</code>. Then once you've done that watch your new directory to start populating with files every two minutes.</p>\n<p>That's it for cron jobs! Be sure to delete the one we created or it will continue forever and fill up temp files!</p>","frontmatter":{"path":"/cron","title":"cron","order":"10A","section":"Last Thoughts","description":"Ever had a task that needs to be done every day? Linux has a feature called cron that will run tasks on a schedule. Brian goes over how to set these up."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"3A","path":"/anatomy-of-a-cli-command","title":"Anatomy of a CLI Command"}}},{"node":{"frontmatter":{"order":"8B","path":"/apt","title":"APT"}}},{"node":{"frontmatter":{"order":"10C","path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":"9C","path":"/conditionals","title":"Conditionals"}}},{"node":{"frontmatter":{"order":"10A","path":"/cron","title":"cron"}}},{"node":{"frontmatter":{"order":"7D","path":"/curl","title":"curl"}}},{"node":{"frontmatter":{"order":"10B","path":"/customize-your-shell","title":"Customize Your Shell"}}},{"node":{"frontmatter":{"order":"6A","path":"/environments","title":"Environments"}}},{"node":{"frontmatter":{"order":"10D","path":"/errata","title":"Errata"}}},{"node":{"frontmatter":{"order":"5A","path":"/interacting-with-files","title":"Interacting with Files"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"2C","path":"/lets-run-linux","title":"Let's Run Linux"}}},{"node":{"frontmatter":{"order":"9D","path":"/loops-and-arrays","title":"Loops and Arrays"}}},{"node":{"frontmatter":{"order":"4A","path":"/nano","title":"nano"}}},{"node":{"frontmatter":{"order":"6D","path":"/process-operators","title":"Exit Codes, Process Operators, and Subcommands"}}},{"node":{"frontmatter":{"order":"6B","path":"/processes","title":"Processes"}}},{"node":{"frontmatter":{"order":"7B","path":"/sftp","title":"SFTP"}}},{"node":{"frontmatter":{"order":"3C","path":"/signals-and-the-power-of-ctrl","title":"Signals and the Power of CTRL"}}},{"node":{"frontmatter":{"order":"8C","path":"/snaps","title":"Snaps"}}},{"node":{"frontmatter":{"order":"7A","path":"/ssh","title":"SSH"}}},{"node":{"frontmatter":{"order":"5C","path":"/streams-and-pipes","title":"Streams and Pipes"}}},{"node":{"frontmatter":{"order":"3B","path":"/common-tips-and-tricks","title":"Common Tips and Tricks"}}},{"node":{"frontmatter":{"order":"5D","path":"/users-groups-and-permissions","title":"Users, Groups, and Permissions"}}},{"node":{"frontmatter":{"order":"9B","path":"/variables","title":"Variables"}}},{"node":{"frontmatter":{"order":"4B","path":"/vim","title":"vim"}}},{"node":{"frontmatter":{"order":"7C","path":"/wget","title":"wget"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is-linux","title":"What is Linux"}}},{"node":{"frontmatter":{"order":"8A","path":"/what-is-package-management","title":"What is Package Management"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-will-you-learn","title":"What you will learn"}}},{"node":{"frontmatter":{"order":"5B","path":"/lol","title":"Wildcards and Replacements"}}},{"node":{"frontmatter":{"order":"9A","path":"/writing-your-own-scripts","title":"Writing Your Own Scripts"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}