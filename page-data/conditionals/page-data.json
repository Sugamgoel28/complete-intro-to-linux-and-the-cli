{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/conditionals",
    "result": {"data":{"markdownRemark":{"html":"<p>In order to write useful bash scripts you need if statements. Let's go over how to make more complicated scripts using these control structures.</p>\n<h2 id=\"conditionals\" style=\"position:relative;\"><a href=\"#conditionals\" aria-label=\"conditionals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditionals</h2>\n<p>A conditional is a statement that only runs if a condition is true. Let's say we want to use the path <code class=\"language-text\">~/temp</code> if the user don't provide an argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span>\n\n<span class=\"token assign-left variable\">DESTINATION</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n<span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"enter a file prefix: \"</span> FILE_PREFIX\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -z <span class=\"token variable\">$DESTINATION</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"no path provided, defaulting to ~/temp\"</span>\n  <span class=\"token assign-left variable\">DESTINATION</span><span class=\"token operator\">=~</span>/temp\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token function\">mkdir</span> -p <span class=\"token variable\">$DESTINATION</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$DESTINATION</span>\n<span class=\"token function\">touch</span> <span class=\"token variable\">${FILE_PREFIX}</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>.txt\n<span class=\"token builtin class-name\">echo</span> <span class=\"token keyword\">done</span></code></pre></div>\n<p>The <code class=\"language-text\">[]</code> are a special notation which actually translate to <code class=\"language-text\">test</code> commands. So our condition actually evaluates to <code class=\"language-text\">test -z $DESTINATION</code>. This is useful to know because if you forget how to do conditional checks you can always run <code class=\"language-text\">man test</code> and it's a pretty understandable list of the various things you can do. In this case, <code class=\"language-text\">-z $DESTINATION</code> is checking to see if DESTINATION is a zero length string which would mean the user didn't provide anything. Go ahead and try</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">test</span> -z <span class=\"token string\">\"\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\"># 0, this is true</span>\n<span class=\"token builtin class-name\">test</span> -z <span class=\"token string\">\"lol\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span> <span class=\"token comment\"># 1, this is false</span></code></pre></div>\n<p>There's a ton operators you can do with test. Here are some examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">test</span> <span class=\"token number\">15</span> -eq <span class=\"token number\">15</span> <span class=\"token comment\"># 0</span>\n<span class=\"token builtin class-name\">test</span> brian <span class=\"token operator\">=</span> brian <span class=\"token comment\"># 0</span>\n<span class=\"token builtin class-name\">test</span> brian <span class=\"token operator\">!=</span> brian <span class=\"token comment\"># 1</span>\n<span class=\"token builtin class-name\">test</span> <span class=\"token number\">15</span> -gt <span class=\"token number\">10</span> <span class=\"token comment\"># 0 gt means greater than</span>\n<span class=\"token builtin class-name\">test</span> <span class=\"token number\">15</span> -le <span class=\"token number\">10</span> <span class=\"token comment\"># 1 le means less than or equal to</span>\n<span class=\"token builtin class-name\">test</span> -e ~/some-file.txt <span class=\"token comment\"># tests to see if a file exists</span>\n<span class=\"token builtin class-name\">test</span> -w ~/some-file.txt <span class=\"token comment\"># tests to see if a file exists and you can write to it</span></code></pre></div>\n<p>I'll stop here but you get the point. There are a lot. Again, check out <code class=\"language-text\">man test</code> to see all your options. So you can translate these into if statements like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -w ~/some-file.txt <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hooray! I can write to this file\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>The <code class=\"language-text\">[]</code> take the place of the test command.</p>\n<h1 id=\"else-and-elif\" style=\"position:relative;\"><a href=\"#else-and-elif\" aria-label=\"else and elif permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>else and elif</h1>\n<p>What about else and else if? Create a new file called ten.sh. Put this in there</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$1</span> -gt <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"greater than 10\"</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$1</span> -lt <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"less than 10\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"equals 10\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>This will let the user give an argument of a number and it will tell you if it's greater than, equal to, or less than 10 using conditionals.</p>\n<h2 id=\"case-statements\" style=\"position:relative;\"><a href=\"#case-statements\" aria-label=\"case statements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Case Statements</h2>\n<p>Let's make one more quick program. Make a file called faces.sh. Put this in flag.sh</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">case</span> <span class=\"token variable\">$1</span> <span class=\"token keyword\">in</span>\n  <span class=\"token string\">\"smile\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\":)\"</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"sad\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\":(\"</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"laugh\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\":D\"</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"sword\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"o()xxx[{::::::::::::::>\"</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"surprise\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"O_O\"</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  *<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I don't know that one yet!\"</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span></code></pre></div>\n<p>There's more fanciness you can accomplish with switch statements but I'll let you get more into it if you want to.</p>","frontmatter":{"path":"/conditionals","title":"Conditionals","order":"9C","section":"Shell Scripts","description":"In order to write useful bash scripts a developer needs if statements. Brian goes over how to make more complicated scripts using these control structures"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"9C","path":"/conditionals","title":"Conditionals"}}},{"node":{"frontmatter":{"order":"10C","path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":"7D","path":"/curl","title":"curl"}}},{"node":{"frontmatter":{"order":"3A","path":"/anatomy-of-a-cli-command","title":"Anatomy of a CLI Command"}}},{"node":{"frontmatter":{"order":"6A","path":"/environments","title":"Environments"}}},{"node":{"frontmatter":{"order":"10A","path":"/cron","title":"cron"}}},{"node":{"frontmatter":{"order":"10D","path":"/errata","title":"Errata"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"9D","path":"/loops-and-arrays","title":"Loops and Arrays"}}},{"node":{"frontmatter":{"order":"8B","path":"/apt","title":"APT"}}},{"node":{"frontmatter":{"order":"4A","path":"/nano","title":"nano"}}},{"node":{"frontmatter":{"order":"6D","path":"/process-operators","title":"Exit Codes, Process Operators, and Subcommands"}}},{"node":{"frontmatter":{"order":"6B","path":"/processes","title":"Processes"}}},{"node":{"frontmatter":{"order":"2C","path":"/lets-run-linux","title":"Let's Run Linux"}}},{"node":{"frontmatter":{"order":"7B","path":"/sftp","title":"SFTP"}}},{"node":{"frontmatter":{"order":"8C","path":"/snaps","title":"Snaps"}}},{"node":{"frontmatter":{"order":"5A","path":"/interacting-with-files","title":"Interacting with Files"}}},{"node":{"frontmatter":{"order":"10B","path":"/customize-your-shell","title":"Customize Your Shell"}}},{"node":{"frontmatter":{"order":"5C","path":"/streams-and-pipes","title":"Streams and Pipes"}}},{"node":{"frontmatter":{"order":"9B","path":"/variables","title":"Variables"}}},{"node":{"frontmatter":{"order":"3B","path":"/common-tips-and-tricks","title":"Common Tips and Tricks"}}},{"node":{"frontmatter":{"order":"3C","path":"/signals-and-the-power-of-ctrl","title":"Signals and the Power of CTRL"}}},{"node":{"frontmatter":{"order":"4B","path":"/vim","title":"vim"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is-linux","title":"What is Linux"}}},{"node":{"frontmatter":{"order":"5D","path":"/users-groups-and-permissions","title":"Users, Groups, and Permissions"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-will-you-learn","title":"What you will learn"}}},{"node":{"frontmatter":{"order":"7C","path":"/wget","title":"wget"}}},{"node":{"frontmatter":{"order":"5B","path":"/lol","title":"Wildcards and Replacements"}}},{"node":{"frontmatter":{"order":"8A","path":"/what-is-package-management","title":"What is Package Management"}}},{"node":{"frontmatter":{"order":"9A","path":"/writing-your-own-scripts","title":"Writing Your Own Scripts"}}},{"node":{"frontmatter":{"order":"7A","path":"/ssh","title":"SSH"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}