{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/environments",
    "result": {"data":{"markdownRemark":{"html":"<p>Whether or not you realize it, your current session of your shell has a bunch of variables set. Most are just set by the OS, some by Multipass (or whatever you're using to run your computer), some by various programs, and some by you.</p>\n<p>Go ahead and run <code class=\"language-text\">printenv</code> to see what variable have been set.</p>\n<p>You'll probably see a super long list of environmental variables. Various programs will refer to these to modify how they work. And what's great you can modify these, either permanently, just for this session, or just for one command.</p>\n<p>So how do we use one? Well, let's give it a shot. Run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> hello my name is <span class=\"token environment constant\">$USER</span></code></pre></div>\n<p>You should see <code class=\"language-text\">hello my name is ubuntu</code>. That <code class=\"language-text\">$USER</code> signifies to bash \"hey, replace this with a variable. So what if we wanted to change that USER just for one command? Try this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">USER</span></span><span class=\"token operator\">=</span>brian <span class=\"token builtin class-name\">echo</span> hello my name is <span class=\"token environment constant\">$USER</span> <span class=\"token comment\"># hello my name is brian</span>\n<span class=\"token builtin class-name\">echo</span> hello my name is <span class=\"token environment constant\">$USER</span> <span class=\"token comment\"># hello my name is ubuntu</span></code></pre></div>\n<p>As you can see, we add that little <code class=\"language-text\">VARIABLE=value</code> part at the first part of a command to temporarily modify the variables.</p>\n<h2 id=\"per-session\" style=\"position:relative;\"><a href=\"#per-session\" aria-label=\"per session permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Per Session</h2>\n<p>So what if we want to modify a variable for a whole session (until you close <em>this</em> open session of bash; if you open another tab of bash, even while this one is still running, it is a different session):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$GREETING</span> <span class=\"token comment\"># nothing</span>\n<span class=\"token assign-left variable\">GREETING</span><span class=\"token operator\">=</span>hello\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$GREETING</span> <span class=\"token comment\"># hello</span></code></pre></div>\n<p>Again, once we close this window, GREETING goes away.</p>\n<h2 id=\"permanent\" style=\"position:relative;\"><a href=\"#permanent\" aria-label=\"permanent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Permanent</h2>\n<p>So what if we want to last forever? There are a few options but really only one is recommend.</p>\n<p>The first is editing <code class=\"language-text\">/etc/environment</code>. This will modify <em>every</em> user's environment so it's often not what you want. Each line in that environment file's format should be <code class=\"language-text\">VARIABLE=value</code> with one per line.</p>\n<p>Similar with <code class=\"language-text\">/etc/profile</code> and <code class=\"language-text\">/etc/bashrc</code> except with these you can actually invoke scripts within them. Again, this is system-wide and not usually what you want.</p>\n<h2 id=\"bashrc-and-bash_profile\" style=\"position:relative;\"><a href=\"#bashrc-and-bash_profile\" aria-label=\"bashrc and bash_profile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.bashrc and .bash_profile</h2>\n<p>This is always a point of confusion to me and I have to look it up every time so if that happens to you too don't worry.</p>\n<p>In your home directory, there are two files, <code class=\"language-text\">.bashrc</code> and <code class=\"language-text\">.bash_profile</code>. These are the files you need to configure and customize your bash shell. You can set things like telling Node.js you're in development mode, set up git how you want to, customize colors, set path, or really anything you can write a bash command for.</p>\n<p><code class=\"language-text\">.bash_profile</code> is only run on login shells. That is to say, it's only run once for each time you log in to your computer. It is <em>not</em> run after that. <code class=\"language-text\">.bashrc</code> is run on every nonlogin shell, so it's run on every tab of bash you start up. Typically what you want is to run your customizations on every shell so you actually just want to modify <code class=\"language-text\">.bashrc</code> and leave <code class=\"language-text\">.bash_profile</code> alone. Actually, what I'd suggest you do is go put this in your <code class=\"language-text\">.bash_profile</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f ~/.bashrc <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">source</span> ~/.bashrc\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>That way your <code class=\"language-text\">.bashrc</code> is <em>always</em> run. And after you put this in there you can just forget <code class=\"language-text\">.bash_profile</code> exists and always just modify <code class=\"language-text\">.bashrc</code>.</p>\n<p>Okay, so now to have variables that affect all shells, you just put a line in there that says:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">VARIABLE</span><span class=\"token operator\">=</span>value</code></pre></div>\n<p>and now it will survive when you log out. Just FYI, if you want that variable to affect <em>this</em> shell, you'll have to do a <code class=\"language-text\">. ~/.bashrc</code> so that it will reload your .bashrc. The <code class=\"language-text\">.</code> means execute in this context. You also could say <code class=\"language-text\">source ~/.bashrc</code> and that would work too.</p>","frontmatter":{"path":"/environments","title":"Environments","order":"6A","section":"Environments and Processes","description":"The environment of a Linux process is key to how it functions. In this section Brian goes over what that means, how to set up your environment, and how to manage it."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"9C","path":"/conditionals","title":"Conditionals"}}},{"node":{"frontmatter":{"order":"10C","path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":"7D","path":"/curl","title":"curl"}}},{"node":{"frontmatter":{"order":"3A","path":"/anatomy-of-a-cli-command","title":"Anatomy of a CLI Command"}}},{"node":{"frontmatter":{"order":"6A","path":"/environments","title":"Environments"}}},{"node":{"frontmatter":{"order":"10A","path":"/cron","title":"cron"}}},{"node":{"frontmatter":{"order":"10D","path":"/errata","title":"Errata"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"9D","path":"/loops-and-arrays","title":"Loops and Arrays"}}},{"node":{"frontmatter":{"order":"8B","path":"/apt","title":"APT"}}},{"node":{"frontmatter":{"order":"4A","path":"/nano","title":"nano"}}},{"node":{"frontmatter":{"order":"6D","path":"/process-operators","title":"Exit Codes, Process Operators, and Subcommands"}}},{"node":{"frontmatter":{"order":"6B","path":"/processes","title":"Processes"}}},{"node":{"frontmatter":{"order":"2C","path":"/lets-run-linux","title":"Let's Run Linux"}}},{"node":{"frontmatter":{"order":"7B","path":"/sftp","title":"SFTP"}}},{"node":{"frontmatter":{"order":"8C","path":"/snaps","title":"Snaps"}}},{"node":{"frontmatter":{"order":"5A","path":"/interacting-with-files","title":"Interacting with Files"}}},{"node":{"frontmatter":{"order":"10B","path":"/customize-your-shell","title":"Customize Your Shell"}}},{"node":{"frontmatter":{"order":"5C","path":"/streams-and-pipes","title":"Streams and Pipes"}}},{"node":{"frontmatter":{"order":"9B","path":"/variables","title":"Variables"}}},{"node":{"frontmatter":{"order":"3B","path":"/common-tips-and-tricks","title":"Common Tips and Tricks"}}},{"node":{"frontmatter":{"order":"3C","path":"/signals-and-the-power-of-ctrl","title":"Signals and the Power of CTRL"}}},{"node":{"frontmatter":{"order":"4B","path":"/vim","title":"vim"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is-linux","title":"What is Linux"}}},{"node":{"frontmatter":{"order":"5D","path":"/users-groups-and-permissions","title":"Users, Groups, and Permissions"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-will-you-learn","title":"What you will learn"}}},{"node":{"frontmatter":{"order":"7C","path":"/wget","title":"wget"}}},{"node":{"frontmatter":{"order":"5B","path":"/lol","title":"Wildcards and Replacements"}}},{"node":{"frontmatter":{"order":"8A","path":"/what-is-package-management","title":"What is Package Management"}}},{"node":{"frontmatter":{"order":"9A","path":"/writing-your-own-scripts","title":"Writing Your Own Scripts"}}},{"node":{"frontmatter":{"order":"7A","path":"/ssh","title":"SSH"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}